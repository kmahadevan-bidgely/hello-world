name: Test and Coverage Check

on:
  issue_comment:
    types:
      - created
env:
  GH_TOKEN: ${{ github.token }}
  ACTIONS_STEP_DEBUG: true

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    if: >
      github.event.comment.body == '/run-ci' &&  github.event.issue.pull_request != null
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write
      statuses: write

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      # Step 2: Set up Java (JDK 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Restore Maven dependencies from cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        continue-on-error: true

      # Step 3: Run tests with JaCoCo coverage
      - name: Run Tests and Generate Coverage
        run: mvn clean test jacoco:report

      - name: Save Maven dependencies into cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      # Step 4: Set up Python and install diff-cover
      - name: Set up Python and Install diff-cover
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 5: Install diff-cover
      - name: Install diff-cover
        run: pip install -r devtools/requirements.txt

      # Step 6: Determine current branch name
      - name: Find current branch name using GH CLIs
        id: get_branch
        run: |
          # Get PR number from the event payload
          PR_NUMBER=${{ github.event.issue.number }}
          
          # Fetch PR details using GitHub CLI
          FULL_JSON=$(gh pr view $PR_NUMBER --json headRefOid,headRefName)
          
          # Extract branch name from the json
          PR_BRANCH=$(echo $FULL_JSON | jq -r '.headRefName')
          # Extract the PR head SHA from the json
          PR_COMMIT_SHA=$(echo $FULL_JSON | jq -r '.headRefOid')
          
          # Save the branch name and commit_sha as an output variable
          echo "branch_name=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$PR_COMMIT_SHA" >> $GITHUB_OUTPUT

      # Step 7: Fetch the main branch from the remote to compare with the current branch
      - name: Fetch origin/main
        run: git fetch origin main

      # Step 8: Evaluate coverage diff
      - name: Evaluate Coverage Diff
        id: diff-coverage
        run: |
          # Generating the diff
          git fetch origin ${{ steps.get_branch.outputs.branch_name }} 
          git checkout ${{ steps.get_branch.outputs.branch_name }}
          git diff main..${{ steps.get_branch.outputs.branch_name }} > diff.txt
          
          # Run diff-cover
          diff-cover target/site/jacoco/jacoco.xml --diff-file=diff.txt --html-report diff-cover-report.html --fail-under=90 > diff-coverage-result.txt || true

      # Step 9: Extract Coverage Numbers
      - name: Extract Coverage Numbers
        if: always()
        id: extract-coverage
        run: |
          cat diff-coverage-result.txt
          COVERAGE=$(grep "Coverage:" diff-coverage-result.txt | awk '{print $2}' | tr -d '%')
          echo "COVERAGE=$COVERAGE"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        shell: bash

      - name: Get PR Number
        if: always()
        run: |
          # Get PR number from the event payload
          echo "PR=${{ github.event.issue.number }}" >> $GITHUB_ENV        

      # Step 10: Post Coverage Comment on PR using github-script
      - name: Post Coverage on PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = process.env.COVERAGE || "Failed to calculate";
            const commentBody = `### Code Coverage Report\n\n- **Diff Coverage**: ${coverage}%\n\n*This comment was generated automatically by GitHub Actions.*`;
            
            // Posting the comment to the PR
            const prNumber = process.env.PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });   

      # Step 11: Upload coverage report as a downloadable artifact
      - name: Upload Diff-Cover HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: diff-cover-report
          path: diff-cover-report.html

      - name: Report build status
        run: |
          REPO="${{ github.repository }}"
          COMMIT_SHA="${{ steps.get_branch.outputs.commit_sha }}"
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          
          # Set the status based on COVERAGE value
          COVERAGE="${{ env.COVERAGE }}"
          if [ "$COVERAGE" -ge 90 ]; then
            STATUS_STATE="success"
            STATUS_DESCRIPTION="CI build passed with ${COVERAGE}% coverage"
          else
            STATUS_STATE="failure"
            STATUS_DESCRIPTION="CI build failed. Expected 90% coverage. Actual coverage is ${COVERAGE}%"
          fi
          
          STATUS_CONTEXT="test-and-coverage"
          
          curl -X POST \
            -H "Authorization: token ${TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{
              "state": "'"${STATUS_STATE}"'",
              "description": "'"${STATUS_DESCRIPTION}"'",
              "context": "'"${STATUS_CONTEXT}"'"
            }' \
            "https://api.github.com/repos/${REPO}/statuses/${COMMIT_SHA}"

      # Step 12: Fail build if coverage is below 90%
      - name: Fail build if coverage is below threshold
        if: ${{ env.COVERAGE }} < 90
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Error: Diff coverage ${{ env.COVERAGE }} is below the threshold 90')


