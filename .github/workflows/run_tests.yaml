name: Test and Coverage Check

on:
  issue_comment:
    types:
      - created
env:
  GH_TOKEN: ${{ github.token }}

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    if: >
      github.event.comment.body == '/run-ci' &&  github.event.issue.pull_request != null
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Java (JDK 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'


      # Step 4: Run tests with JaCoCo coverage
      - name: Run Tests and Generate Coverage
        run: mvn clean test jacoco:report

      # Step 5: Set up Python and install diff-cover
      - name: Set up Python and Install diff-cover
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install diff-cover
        run: pip install -r devtools/requirements.txt

      - name: Find current branch name using GH CLIs
        if: false
        id: get_branch
        run: |
          # Get PR number from the event payload
          PR_NUMBER=${{ github.event.issue.number }}
          
          # Fetch PR details using GitHub CLI
          PR_BRANCH=$(gh pr view $PR_NUMBER --json headRefName -q '.headRefName')
          
          # Save the branch name as an output variable
          echo "branch_name=$PR_BRANCH" >> $GITHUB_OUTPUT

      - name: Display branch name
        if: false
        run: echo "The branch name is ${{ steps.get_branch.outputs.branch_name }}"

      # Fetch the main branch from the remote to compare with the current branch
      - name: Fetch origin/main
        run: git fetch origin main

      - name: Evaluate Coverage Diff
        id: diff-coverage
        run: |
          # Generating the diff
          #git diff ${{ steps.get_branch.outputs.branch_name }}...HEAD > diff.txt
          
          # showing the diff
          #cat diff.txt
          
          # Run diff-cover
          diff-cover target/site/jacoco/jacoco.xml --compare-branch=origin/main --html-report diff-cover-report.html > diff-coverage-result.txt
          diff-cover target/site/jacoco/jacoco.xml --compare-branch=origin/main --html-report diff-cover-report.html --fail-under=90 || true

          #diff-cover target/site/jacoco/jacoco.xml --diff-file=diff.txt --html-report diff-cover-report.html > diff-coverage-result.txt
          #diff-cover target/site/jacoco/jacoco.xml ---diff-file=diff.txt --html-report diff-cover-report.html --fail-under=90 || true

      # Step 8: Extract Coverage Numbers
      - name: Extract Coverage Numbers
        if: always()
        id: extract-coverage
        run: |
          cat diff-coverage-result.txt
          COVERAGE=$(grep "Coverage:" diff-coverage-result.txt | awk '{print $2}' | tr -d '%')
          echo "COVERAGE=${COVERAGE}"
          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        shell: bash

      # Step 9: Post Coverage Comment on PR using github-script
      - name: Post Coverage on PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = process.env.COVERAGE || "Failed to calculate";
            const commentBody = `### Code Coverage Report\n\n- **Diff Coverage**: ${coverage}%\n\n*This comment was generated automatically by GitHub Actions.*`;
            
            // Posting the comment to the PR
            const prNumber = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });   

      # Step 10: Upload coverage report as a downloadable artifact
      - name: Upload Diff-Cover HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: diff-cover-report
          path: diff-cover-report.html

      # Step 11: Fail build if coverage is below 90%
      - name: Fail Build if Coverage is Below Threshold
        run: |
          COVERAGE=${{ env.COVERAGE }}
          THRESHOLD=90
          if [[ "$COVERAGE" -lt "$THRESHOLD" ]]; then
            echo "Error: Diff coverage ($COVERAGE%) is below the threshold ($THRESHOLD%)"
            exit 1
          fi
        shell: bash