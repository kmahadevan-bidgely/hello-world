name: Test and Coverage Check

on:
  pull_request:
    branches:
      - '**'

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      id-token: write

    steps:
      # Step 1: Check out the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java (JDK 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run tests with JaCoCo coverage
      - name: Run Tests and Generate Coverage
        run: mvn clean test jacoco:report

      # Step 5: Set up Python and install diff-cover
      - name: Set up Python and Install diff-cover
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install diff-cover
        run: pip install diff-cover

      # Step 6: Determine the Default Branch
      - name: Determine Default Branch
        id: default-branch
        run: echo "DEFAULT_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV

      # Step 7: Evaluate coverage diff using diff-cover
      - name: Evaluate Coverage Diff
        id: diff-coverage
        run: |
          # Fetch the default branch with all commits
          git fetch --no-tags --prune --depth=1 origin $DEFAULT_BRANCH
          
          # Verify the default branch exists locally
          git branch --track $DEFAULT_BRANCH origin/$DEFAULT_BRANCH || echo "$DEFAULT_BRANCH already exists locally"
          
          # Checkout the default branch to ensure it's locally available
          git checkout $DEFAULT_BRANCH
          
          # Run diff-cover
          diff-cover target/site/jacoco/jacoco.xml --compare-branch=$DEFAULT_BRANCH --html-report diff-cover-report.html --fail-under=90 > diff-coverage-result.txt || true

      # Step 8: Extract Coverage Numbers
      - name: Extract Coverage Numbers
        id: extract-coverage
        run: |
          cat diff-coverage-result.txt
          COVERAGE=$(grep "Diff Coverage" diff-coverage-result.txt | awk '{print $3}')
          echo "COVERAGE=${COVERAGE}"
          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV
        shell: bash

      # Step 9: Post Coverage Comment on PR
      - name: Post Coverage on PR
        if: always()
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '### Code Coverage Report\n\n- **Diff Coverage**: ${{ env.COVERAGE }} d %\n\n*This comment was generated automatically by GitHub Actions.*'
            })        

      # Step 10: Upload coverage report as a downloadable artifact
      - name: Upload Diff-Cover HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: diff-cover-report
          path: diff-cover-report.html

      # Step 11: Fail build if coverage is below 90%
      - name: Fail Build if Coverage is Below Threshold
        run: |
          COVERAGE=${{ env.COVERAGE }}
          THRESHOLD=90
          if [[ "$COVERAGE" -lt "$THRESHOLD" ]]; then
            echo "Error: Diff coverage ($COVERAGE%) is below the threshold ($THRESHOLD%)"
            exit 1
          fi
        shell: bash